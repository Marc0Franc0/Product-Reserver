version: '3.8'
services:
  discovery-service:
    container_name: discovery-service-container
    build: DiscoveryService/.
    ports:
      - "8761:8761"
    restart: always
    environment:
      eureka.instance.hostname: discovery-service
  config-server:
    container_name: config-server-container
    build: ConfigServer/.
    ports:
      - "8888:8888"
    restart: always
  api-gateway:
    container_name: api-gateway-container
    ports:
      - "8080:8080"
    build: ApiGateway/.
    links:
      - discovery-service
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
    restart: always
  product-microservice:
    container_name: product-microservice-container
    build: ProductMicroservice/.
    restart: always
    links:
      - config-server
      - rabbitmq
      - mongo
      - discovery-service
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/productdb
      SPRING_CLOUD_CONFIG_PROFILE: prod
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_PASSWORD: guest
      SPRING_RABBITMQ_USERNAME: guest
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
  stock-microservice:
    container_name: stock-microservice-container
    build: StockMicroservice/.
    restart: always
    links:
      - config-server
      - mysqldb
      - rabbitmq
      - discovery-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysqldb:3306/stockdb
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD:
      SPRING_CLOUD_CONFIG_PROFILE: prod
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_PASSWORD: guest
      SPRING_RABBITMQ_USERNAME: guest
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
  booking-microservice:
    container_name: booking-microservice-container
    build: BookingMicroservice/.
    restart: always
    links:
      - config-server
      - mysqldb
      - rabbitmq
      - discovery-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysqldb:3306/bookingdb
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD:
      SPRING_CLOUD_CONFIG_PROFILE: prod
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_PASSWORD: guest
      SPRING_RABBITMQ_USERNAME: guest
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
  rabbitmq:
    image: rabbitmq:management
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
  mongo:
    container_name: mongo-container
    image: mongo:latest
    hostname: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongodb:/data/db
  mysqldb:
    container_name: mysql-container
    image: mysql:8.0.26
    restart: always
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
    entrypoint:
      sh -c "
      echo 'CREATE DATABASE IF NOT EXISTS stockdb; CREATE DATABASE IF NOT EXISTS bookingdb;' > /docker-entrypoint-initdb.d/init.sql;
      /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
      "
    ports:
      - "3306:3306"
    volumes:
      - mysqldb:/data/db
volumes:
  mongodb:
  mysqldb: